"use strict";

class Mat4 extends Mat {
	static n = 4;
	
	constructor(...val) {
		if (val[0] instanceof Mat4)
			super(...val[0].val);
		else if (val[0] instanceof Mat3) {
			let _val = [];
			for(let i = 0; i < Mat3.n; i++) {
				_val = _val.concat(val[0]._col(i));
				_val.push(0);
			}
			super(..._val, 0, 0, 0, 1);
		} else if (val[0] instanceof Mat2) {
			let _val = [];
			for(let i = 0; i < Mat2.n; i++) {
				_val = _val.concat(val[0]._col(i));
				_val.push(0, 0);
			}
			super(..._val, 0, 0, 1, 0, 0, 0, 0, 1);
		} else
			super(...val);
	}
	
	col(i) {
		return new Vec4(this._col(i));
	}
	
	get det() {
		if(this._det == null) {
			let m = this.val;
			this._det = m[ 0] * (  m[ 5] * m[10] * m[15]
			                     - m[ 5] * m[14] * m[11]
			                     - m[ 6] * m[ 9] * m[15]
			                     + m[ 6] * m[13] * m[11]
			                     + m[ 7] * m[ 9] * m[14]
			                     - m[ 7] * m[13] * m[10]) +
			            m[ 4] * (- m[ 1] * m[10] * m[15]
			                     + m[ 1] * m[14] * m[11]
			                     + m[ 2] * m[ 9] * m[15]
			                     - m[ 2] * m[13] * m[11]
			                     - m[ 3] * m[ 9] * m[14]
			                     + m[ 3] * m[13] * m[10]) +
			            m[ 8] * (  m[ 1] * m[ 6] * m[15]
			                     - m[ 1] * m[14] * m[ 7]
			                     - m[ 2] * m[ 5] * m[15]
			                     + m[ 2] * m[13] * m[ 7]
			                     + m[ 3] * m[ 5] * m[14]
			                     - m[ 3] * m[13] * m[ 6]) +
			            m[12] * (- m[ 1] * m[ 6] * m[11]
			                     + m[ 1] * m[10] * m[ 7]
			                     + m[ 2] * m[ 5] * m[11]
			                     - m[ 2] * m[ 9] * m[ 7]
			                     - m[ 3] * m[ 5] * m[10]
			                     + m[ 3] * m[ 9] * m[ 6]);
		}
		return this._det;
	}
	
	invert() {
		let m = this.val;
		let adj = [   m[ 5] * m[10] * m[15]
		            - m[ 5] * m[14] * m[11]
		            - m[ 6] * m[ 9] * m[15]
		            + m[ 6] * m[13] * m[11]
		            + m[ 7] * m[ 9] * m[14]
		            - m[ 7] * m[13] * m[10],
		            - m[ 1] * m[10] * m[15]
		            + m[ 1] * m[14] * m[11]
		            + m[ 2] * m[ 9] * m[15]
		            - m[ 2] * m[13] * m[11]
		            - m[ 3] * m[ 9] * m[14]
		            + m[ 3] * m[13] * m[10],
		              m[ 1] * m[ 6] * m[15]
		            - m[ 1] * m[14] * m[ 7]
		            - m[ 2] * m[ 5] * m[15]
		            + m[ 2] * m[13] * m[ 7]
		            + m[ 3] * m[ 5] * m[14]
		            - m[ 3] * m[13] * m[ 6],
		            - m[ 1] * m[ 6] * m[11]
		            + m[ 1] * m[10] * m[ 7]
		            + m[ 2] * m[ 5] * m[11]
		            - m[ 2] * m[ 9] * m[ 7]
		            - m[ 3] * m[ 5] * m[10]
		            + m[ 3] * m[ 9] * m[ 6],
		            - m[ 4] * m[10] * m[15]
		            + m[ 4] * m[14] * m[11]
		            + m[ 6] * m[ 8] * m[15]
		            - m[ 6] * m[12] * m[11]
		            - m[ 7] * m[ 8] * m[14]
		            + m[ 7] * m[12] * m[10],
		              m[ 0] * m[10] * m[15]
		            - m[ 0] * m[14] * m[11]
		            - m[ 2] * m[ 8] * m[15]
		            + m[ 2] * m[12] * m[11]
		            + m[ 3] * m[ 8] * m[14]
		            - m[ 3] * m[12] * m[10],
		            - m[ 0] * m[ 6] * m[15]
		            + m[ 0] * m[14] * m[ 7]
		            + m[ 2] * m[ 4] * m[15]
		            - m[ 2] * m[12] * m[ 7]
		            - m[ 3] * m[ 4] * m[14]
		            + m[ 3] * m[12] * m[ 6],
		              m[ 0] * m[ 6] * m[11]
		            - m[ 0] * m[10] * m[ 7]
		            - m[ 2] * m[ 4] * m[11]
		            + m[ 2] * m[ 8] * m[ 7]
		            + m[ 3] * m[ 4] * m[10]
		            - m[ 3] * m[ 8] * m[ 6],
		              m[ 4] * m[ 9] * m[15]
		            - m[ 4] * m[13] * m[11]
		            - m[ 5] * m[ 8] * m[15]
		            + m[ 5] * m[12] * m[11]
		            + m[ 7] * m[ 8] * m[13]
		            - m[ 7] * m[12] * m[ 9],
		            - m[ 0] * m[ 9] * m[15]
		            + m[ 0] * m[13] * m[11]
		            + m[ 1] * m[ 8] * m[15]
		            - m[ 1] * m[12] * m[11]
		            - m[ 3] * m[ 8] * m[13]
		            + m[ 3] * m[12] * m[ 9],
		              m[ 0] * m[ 5] * m[15]
		            - m[ 0] * m[13] * m[ 7]
		            - m[ 1] * m[ 4] * m[15]
		            + m[ 1] * m[12] * m[ 7]
		            + m[ 3] * m[ 4] * m[13]
		            - m[ 3] * m[12] * m[ 5],
		            - m[ 0] * m[ 5] * m[11]
		            + m[ 0] * m[ 9] * m[ 7]
		            + m[ 1] * m[ 4] * m[11]
		            - m[ 1] * m[ 8] * m[ 7]
		            - m[ 3] * m[ 4] * m[ 9]
		            + m[ 3] * m[ 8] * m[ 5],
		            - m[ 4] * m[ 9] * m[14]
		            + m[ 4] * m[13] * m[10]
		            + m[ 5] * m[ 8] * m[14]
		            - m[ 5] * m[12] * m[10]
		            - m[ 6] * m[ 8] * m[13]
		            + m[ 6] * m[12] * m[ 9],
		              m[ 0] * m[ 9] * m[14]
		            - m[ 0] * m[13] * m[10]
		            - m[ 1] * m[ 8] * m[14]
		            + m[ 1] * m[12] * m[10]
		            + m[ 2] * m[ 8] * m[13]
		            - m[ 2] * m[12] * m[ 9],
		            - m[ 0] * m[ 5] * m[14]
		            + m[ 0] * m[13] * m[ 6]
		            + m[ 1] * m[ 4] * m[14]
		            - m[ 1] * m[12] * m[ 6]
		            - m[ 2] * m[ 4] * m[13]
		            + m[ 2] * m[12] * m[ 5],
		              m[ 0] * m[ 5] * m[10]
		            - m[ 0] * m[ 9] * m[ 6]
		            - m[ 1] * m[ 4] * m[10]
		            + m[ 1] * m[ 8] * m[ 6]
		            + m[ 2] * m[ 4] * m[ 9]
		            - m[ 2] * m[ 8] * m[ 5] ];
		if(this._det == null)
			this._det = m[ 0] * adj[ 0] +
			            m[ 4] * adj[ 1] +
			            m[ 8] * adj[ 2] +
			            m[12] * adj[ 3];
		return this._invert(adj);
	}
	
}
